#!/usr/bin / env node
module.exports = {
  zip: 'VSCode-win32-x64-1.17.2.zip',
  run: 'bin/Code.exe',
  node_modules_parent: 'bin'
};

if (process.mainModule === module) {
  switch (process.env.npm_lifecycle_event) {
    case 'prepublish':
    case 'prepublishOnly':
      renameSudir('node_modules', 'x-node_modules');
      break;
    case 'postinstall':
      renameSudir('x-node_modules', 'node_modules');
      break;

    default:
      var child_process = require('child_process');
      child_process.spawnSync(module.exports.run, process.argv.slice(2));
      break;
  }
}

function renameSudir(from, to) {
  var fs = require('fs');
  var path = require('path');

  var newlyConverted = []
  var alreadyConverted = [];

  console.log('RENAMING ' + from + ' -> ' + to);

  var findRoot = path.resolve(__dirname, module.exports.node_modules_parent);
  var check = [findRoot];
  while (check.length) {
    var dir = check.pop();
    try {
      fs.readdirSync(dir).forEach(function (file) {
        file = path.resolve(dir, file);
        try {
          if (path.basename(file) === from) {
            var fileTo = path.join(path.dirname(file), to);
            fs.renameSync(file, fileTo);
            newlyConverted.push(fileTo.slice(findRoot.length));
            file = fileTo;
          }
          else if (path.basename(file) === to) {
            alreadyConverted.push(file.slice(findRoot.length));
          }
        }
        catch (error) {
          console.log('Renaming ' + file + ': ' + error.message);
        }

        try {
          if (fs.statSync(file).isDirectory()) {
            check.push(file);
          }
        }
        catch (error) {
          console.log('Traversing ' + file + ': ' + error.message);
        }
      });
    }
    catch (error) {
      console.log('Processing ' + dir + ' directory: ' + error.message);
    }
  }


  if (newlyConverted.length)
    console.log('Renamed' + (newlyConverted.length == 1 ? '' : ' ' + newlyConverted.length) + ':' +
      newlyConverted.map(function (toDir) { return '  ' + toDir; }).join('\n'));
  if (alreadyConverted.length)
    console.log('Ready' + (alreadyConverted.length == 1 ? '' : ' ' + alreadyConverted.length) + ':' +
      alreadyConverted.map(function (toDir) { return '  ' + toDir; }).join('\n'));

  if (!newlyConverted.length && !alreadyConverted.length)
    console.log('No candidates for rename found in ' + findRoot);
}
